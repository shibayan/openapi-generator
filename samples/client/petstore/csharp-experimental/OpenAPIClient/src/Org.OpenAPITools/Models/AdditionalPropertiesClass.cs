/* 
 * OpenAPI Petstore
 *
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Org.OpenAPITools.Models
{
    /// <summary>
    /// AdditionalPropertiesClass
    /// </summary>
    public partial class AdditionalPropertiesClass : IEquatable<AdditionalPropertiesClass>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AdditionalPropertiesClass" /> class.
        /// </summary>
        /// <param name="mapProperty">mapProperty.</param>
        /// <param name="mapOfMapProperty">mapOfMapProperty.</param>
        public AdditionalPropertiesClass(IDictionary<string, string>? mapProperty = default, IDictionary<string, IDictionary<string, string>>? mapOfMapProperty = default)
        {
            MapProperty = mapProperty;
            MapOfMapProperty = mapOfMapProperty;
        }

        /// <summary>
        /// Gets or Sets MapProperty
        /// </summary>
        [JsonProperty("map_property", NullValueHandling = NullValueHandling.Ignore)]
        public IDictionary<string, string>? MapProperty { get; set; }

        /// <summary>
        /// Gets or Sets MapOfMapProperty
        /// </summary>
        [JsonProperty("map_of_map_property", NullValueHandling = NullValueHandling.Ignore)]
        public IDictionary<string, IDictionary<string, string>>? MapOfMapProperty { get; set; }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object? obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((AdditionalPropertiesClass)obj);
        }

        /// <summary>
        /// Returns true if AdditionalPropertiesClass instances are equal
        /// </summary>
        /// <param name="other">Instance of AdditionalPropertiesClass to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AdditionalPropertiesClass? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;
            return 
                Equals(MapProperty, other.MapProperty) &&
                Equals(MapOfMapProperty, other.MapOfMapProperty);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            var hashCode = new HashCode();
            hashCode.Add(MapProperty);
            hashCode.Add(MapOfMapProperty);
            return hashCode.ToHashCode();
        }
    }
}
