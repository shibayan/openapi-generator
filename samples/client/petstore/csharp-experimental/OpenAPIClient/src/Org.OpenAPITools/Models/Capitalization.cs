/*
 * OpenAPI Petstore
 *
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Org.OpenAPITools.Models
{
    /// <summary>
    /// Capitalization
    /// </summary>
    public partial class Capitalization : IEquatable<Capitalization>
    {
        /// <summary>
        /// Gets or Sets SmallCamel
        /// </summary>
        [JsonProperty("smallCamel", NullValueHandling = NullValueHandling.Ignore)]
        public string? SmallCamel { get; set; }

        /// <summary>
        /// Gets or Sets CapitalCamel
        /// </summary>
        [JsonProperty("CapitalCamel", NullValueHandling = NullValueHandling.Ignore)]
        public string? CapitalCamel { get; set; }

        /// <summary>
        /// Gets or Sets SmallSnake
        /// </summary>
        [JsonProperty("small_Snake", NullValueHandling = NullValueHandling.Ignore)]
        public string? SmallSnake { get; set; }

        /// <summary>
        /// Gets or Sets CapitalSnake
        /// </summary>
        [JsonProperty("Capital_Snake", NullValueHandling = NullValueHandling.Ignore)]
        public string? CapitalSnake { get; set; }

        /// <summary>
        /// Gets or Sets SCAETHFlowPoints
        /// </summary>
        [JsonProperty("SCA_ETH_Flow_Points", NullValueHandling = NullValueHandling.Ignore)]
        public string? SCAETHFlowPoints { get; set; }

        /// <summary>
        /// Name of the pet 
        /// </summary>
        /// <value>Name of the pet </value>
        [JsonProperty("ATT_NAME", NullValueHandling = NullValueHandling.Ignore)]
        public string? ATT_NAME { get; set; }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object? obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((Capitalization)obj);
        }

        /// <summary>
        /// Returns true if Capitalization instances are equal
        /// </summary>
        /// <param name="other">Instance of Capitalization to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Capitalization? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;
            return 
                SmallCamel == other.SmallCamel &&
                CapitalCamel == other.CapitalCamel &&
                SmallSnake == other.SmallSnake &&
                CapitalSnake == other.CapitalSnake &&
                SCAETHFlowPoints == other.SCAETHFlowPoints &&
                ATT_NAME == other.ATT_NAME;
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            var hashCode = new HashCode();
            hashCode.Add(SmallCamel);
            hashCode.Add(CapitalCamel);
            hashCode.Add(SmallSnake);
            hashCode.Add(CapitalSnake);
            hashCode.Add(SCAETHFlowPoints);
            hashCode.Add(ATT_NAME);
            return hashCode.ToHashCode();
        }
    }
}
