/*
 * OpenAPI Petstore
 *
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Org.OpenAPITools.Models
{
    /// <summary>
    /// EnumTest
    /// </summary>
    public partial class EnumTest : IEquatable<EnumTest>
    {
        /// <summary>
        /// Defines EnumString
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EnumStringEnum
        {
            /// <summary>
            /// Enum UPPER for value: UPPER
            /// </summary>
            [EnumMember(Value = "UPPER")]
            UPPER = 1,

            /// <summary>
            /// Enum Lower for value: lower
            /// </summary>
            [EnumMember(Value = "lower")]
            Lower = 2,

            /// <summary>
            /// Enum Empty for value: 
            /// </summary>
            [EnumMember(Value = "")]
            Empty = 3

        }

        /// <summary>
        /// Defines EnumStringRequired
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EnumStringRequiredEnum
        {
            /// <summary>
            /// Enum UPPER for value: UPPER
            /// </summary>
            [EnumMember(Value = "UPPER")]
            UPPER = 1,

            /// <summary>
            /// Enum Lower for value: lower
            /// </summary>
            [EnumMember(Value = "lower")]
            Lower = 2,

            /// <summary>
            /// Enum Empty for value: 
            /// </summary>
            [EnumMember(Value = "")]
            Empty = 3

        }

        /// <summary>
        /// Defines EnumInteger
        /// </summary>
        public enum EnumIntegerEnum
        {
            /// <summary>
            /// Enum NUMBER_1 for value: 1
            /// </summary>
            NUMBER_1 = 1,

            /// <summary>
            /// Enum NUMBER_MINUS_1 for value: -1
            /// </summary>
            NUMBER_MINUS_1 = -1

        }

        /// <summary>
        /// Defines EnumNumber
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EnumNumberEnum
        {
            /// <summary>
            /// Enum NUMBER_1_DOT_1 for value: 1.1
            /// </summary>
            [EnumMember(Value = "1.1")]
            NUMBER_1_DOT_1 = 1,

            /// <summary>
            /// Enum NUMBER_MINUS_1_DOT_2 for value: -1.2
            /// </summary>
            [EnumMember(Value = "-1.2")]
            NUMBER_MINUS_1_DOT_2 = 2

        }

        /// <summary>
        /// Gets or Sets EnumString
        /// </summary>
        [JsonProperty("enum_string", NullValueHandling = NullValueHandling.Ignore)]
        public EnumStringEnum? EnumString { get; set; }

        /// <summary>
        /// Gets or Sets EnumStringRequired
        /// </summary>
        [Required]
        [JsonProperty("enum_string_required", NullValueHandling = NullValueHandling.Ignore)]
        public EnumStringRequiredEnum EnumStringRequired { get; set; }

        /// <summary>
        /// Gets or Sets EnumInteger
        /// </summary>
        [JsonProperty("enum_integer", NullValueHandling = NullValueHandling.Ignore)]
        public EnumIntegerEnum? EnumInteger { get; set; }

        /// <summary>
        /// Gets or Sets EnumNumber
        /// </summary>
        [JsonProperty("enum_number", NullValueHandling = NullValueHandling.Ignore)]
        public EnumNumberEnum? EnumNumber { get; set; }

        /// <summary>
        /// Gets or Sets OuterEnum
        /// </summary>
        [JsonProperty("outerEnum", NullValueHandling = NullValueHandling.Ignore)]
        public OuterEnum? OuterEnum { get; set; }

        /// <summary>
        /// Gets or Sets OuterEnumInteger
        /// </summary>
        [JsonProperty("outerEnumInteger", NullValueHandling = NullValueHandling.Ignore)]
        public OuterEnumInteger? OuterEnumInteger { get; set; }

        /// <summary>
        /// Gets or Sets OuterEnumDefaultValue
        /// </summary>
        [JsonProperty("outerEnumDefaultValue", NullValueHandling = NullValueHandling.Ignore)]
        public OuterEnumDefaultValue? OuterEnumDefaultValue { get; set; }

        /// <summary>
        /// Gets or Sets OuterEnumIntegerDefaultValue
        /// </summary>
        [JsonProperty("outerEnumIntegerDefaultValue", NullValueHandling = NullValueHandling.Ignore)]
        public OuterEnumIntegerDefaultValue? OuterEnumIntegerDefaultValue { get; set; }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object? obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((EnumTest)obj);
        }

        /// <summary>
        /// Returns true if EnumTest instances are equal
        /// </summary>
        /// <param name="other">Instance of EnumTest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EnumTest? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;
            return 
                EnumString == other.EnumString &&
                EnumStringRequired == other.EnumStringRequired &&
                EnumInteger == other.EnumInteger &&
                EnumNumber == other.EnumNumber &&
                OuterEnum == other.OuterEnum &&
                OuterEnumInteger == other.OuterEnumInteger &&
                OuterEnumDefaultValue == other.OuterEnumDefaultValue &&
                OuterEnumIntegerDefaultValue == other.OuterEnumIntegerDefaultValue;
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            var hashCode = new HashCode();
            hashCode.Add(EnumString);
            hashCode.Add(EnumStringRequired);
            hashCode.Add(EnumInteger);
            hashCode.Add(EnumNumber);
            hashCode.Add(OuterEnum);
            hashCode.Add(OuterEnumInteger);
            hashCode.Add(OuterEnumDefaultValue);
            hashCode.Add(OuterEnumIntegerDefaultValue);
            return hashCode.ToHashCode();
        }
    }
}
