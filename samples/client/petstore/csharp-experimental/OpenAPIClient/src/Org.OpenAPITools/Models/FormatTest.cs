/* 
 * OpenAPI Petstore
 *
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Org.OpenAPITools.Models
{
    /// <summary>
    /// FormatTest
    /// </summary>
    public partial class FormatTest : IEquatable<FormatTest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FormatTest" /> class.
        /// </summary>
        [JsonConstructor]
        protected FormatTest() { }

        /// <summary>
        /// Initializes a new instance of the <see cref="FormatTest" /> class.
        /// </summary>
        /// <param name="integer">integer.</param>
        /// <param name="int32">int32.</param>
        /// <param name="int64">int64.</param>
        /// <param name="number">number (required).</param>
        /// <param name="_float">_float.</param>
        /// <param name="_double">_double.</param>
        /// <param name="_string">_string.</param>
        /// <param name="_byte">_byte (required).</param>
        /// <param name="binary">binary.</param>
        /// <param name="date">date (required).</param>
        /// <param name="dateTime">dateTime.</param>
        /// <param name="uuid">uuid.</param>
        /// <param name="password">password (required).</param>
        /// <param name="patternWithDigits">A string that is a 10 digit number. Can have leading zeros..</param>
        /// <param name="patternWithDigitsAndDelimiter">A string starting with &#39;image_&#39; (case insensitive) and one to three digits following i.e. Image_01..</param>
        public FormatTest(int? integer = default, int? int32 = default, long? int64 = default, decimal number = default, float? _float = default, double? _double = default, string? _string = default, byte[] _byte = default, System.IO.Stream? binary = default, DateTime date = default, DateTime? dateTime = default, Guid? uuid = default, string password = default, string? patternWithDigits = default, string? patternWithDigitsAndDelimiter = default)
        {
            Integer = integer;
            Int32 = int32;
            Int64 = int64;
            Number = number;
            Float = _float;
            Double = _double;
            String = _string;
            Byte = _byte;
            Binary = binary;
            Date = date;
            DateTime = dateTime;
            Uuid = uuid;
            Password = password;
            PatternWithDigits = patternWithDigits;
            PatternWithDigitsAndDelimiter = patternWithDigitsAndDelimiter;
        }

        /// <summary>
        /// Gets or Sets Integer
        /// </summary>
        [JsonProperty("integer", NullValueHandling = NullValueHandling.Ignore)]
        public int? Integer { get; set; }

        /// <summary>
        /// Gets or Sets Int32
        /// </summary>
        [JsonProperty("int32", NullValueHandling = NullValueHandling.Ignore)]
        public int? Int32 { get; set; }

        /// <summary>
        /// Gets or Sets Int64
        /// </summary>
        [JsonProperty("int64", NullValueHandling = NullValueHandling.Ignore)]
        public long? Int64 { get; set; }

        /// <summary>
        /// Gets or Sets Number
        /// </summary>
        [JsonProperty("number", NullValueHandling = NullValueHandling.Ignore)]
        public decimal Number { get; set; }

        /// <summary>
        /// Gets or Sets Float
        /// </summary>
        [JsonProperty("float", NullValueHandling = NullValueHandling.Ignore)]
        public float? Float { get; set; }

        /// <summary>
        /// Gets or Sets Double
        /// </summary>
        [JsonProperty("double", NullValueHandling = NullValueHandling.Ignore)]
        public double? Double { get; set; }

        /// <summary>
        /// Gets or Sets String
        /// </summary>
        [JsonProperty("string", NullValueHandling = NullValueHandling.Ignore)]
        public string? String { get; set; }

        /// <summary>
        /// Gets or Sets Byte
        /// </summary>
        [JsonProperty("byte", NullValueHandling = NullValueHandling.Ignore)]
        public byte[] Byte { get; set; }

        /// <summary>
        /// Gets or Sets Binary
        /// </summary>
        [JsonProperty("binary", NullValueHandling = NullValueHandling.Ignore)]
        public System.IO.Stream? Binary { get; set; }

        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        [JsonProperty("date", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(Org.OpenAPITools.Client.OpenAPIDateConverter))]
        public DateTime Date { get; set; }

        /// <summary>
        /// Gets or Sets DateTime
        /// </summary>
        [JsonProperty("dateTime", NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? DateTime { get; set; }

        /// <summary>
        /// Gets or Sets Uuid
        /// </summary>
        [JsonProperty("uuid", NullValueHandling = NullValueHandling.Ignore)]
        public Guid? Uuid { get; set; }

        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [JsonProperty("password", NullValueHandling = NullValueHandling.Ignore)]
        public string Password { get; set; }

        /// <summary>
        /// A string that is a 10 digit number. Can have leading zeros.
        /// </summary>
        /// <value>A string that is a 10 digit number. Can have leading zeros.</value>
        [JsonProperty("pattern_with_digits", NullValueHandling = NullValueHandling.Ignore)]
        public string? PatternWithDigits { get; set; }

        /// <summary>
        /// A string starting with &#39;image_&#39; (case insensitive) and one to three digits following i.e. Image_01.
        /// </summary>
        /// <value>A string starting with &#39;image_&#39; (case insensitive) and one to three digits following i.e. Image_01.</value>
        [JsonProperty("pattern_with_digits_and_delimiter", NullValueHandling = NullValueHandling.Ignore)]
        public string? PatternWithDigitsAndDelimiter { get; set; }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object? obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((FormatTest)obj);
        }

        /// <summary>
        /// Returns true if FormatTest instances are equal
        /// </summary>
        /// <param name="other">Instance of FormatTest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FormatTest? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;
            return 
                Integer == other.Integer &&
                Int32 == other.Int32 &&
                Int64 == other.Int64 &&
                Number == other.Number &&
                Float == other.Float &&
                Double == other.Double &&
                String == other.String &&
                Byte == other.Byte &&
                Binary == other.Binary &&
                Date == other.Date &&
                DateTime == other.DateTime &&
                Uuid == other.Uuid &&
                Password == other.Password &&
                PatternWithDigits == other.PatternWithDigits &&
                PatternWithDigitsAndDelimiter == other.PatternWithDigitsAndDelimiter;
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            var hashCode = new HashCode();
            hashCode.Add(Integer);
            hashCode.Add(Int32);
            hashCode.Add(Int64);
            hashCode.Add(Number);
            hashCode.Add(Float);
            hashCode.Add(Double);
            hashCode.Add(String);
            hashCode.Add(Byte);
            hashCode.Add(Binary);
            hashCode.Add(Date);
            hashCode.Add(DateTime);
            hashCode.Add(Uuid);
            hashCode.Add(Password);
            hashCode.Add(PatternWithDigits);
            hashCode.Add(PatternWithDigitsAndDelimiter);
            return hashCode.ToHashCode();
        }
    }
}
