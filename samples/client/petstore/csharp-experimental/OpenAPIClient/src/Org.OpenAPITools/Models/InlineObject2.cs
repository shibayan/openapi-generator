/* 
 * OpenAPI Petstore
 *
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Org.OpenAPITools.Models
{
    /// <summary>
    /// InlineObject2
    /// </summary>
    public partial class InlineObject2 : IEquatable<InlineObject2>
    {
        /// <summary>
        /// Defines EnumFormStringArray
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EnumFormStringArrayEnum
        {
            /// <summary>
            /// Enum GreaterThan for value: >
            /// </summary>
            [EnumMember(Value = ">")]
            GreaterThan = 1,

            /// <summary>
            /// Enum Dollar for value: $
            /// </summary>
            [EnumMember(Value = "$")]
            Dollar = 2

        }


        /// <summary>
        /// Form parameter enum test (string)
        /// </summary>
        /// <value>Form parameter enum test (string)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EnumFormStringEnum
        {
            /// <summary>
            /// Enum Abc for value: _abc
            /// </summary>
            [EnumMember(Value = "_abc")]
            Abc = 1,

            /// <summary>
            /// Enum Efg for value: -efg
            /// </summary>
            [EnumMember(Value = "-efg")]
            Efg = 2,

            /// <summary>
            /// Enum Xyz for value: (xyz)
            /// </summary>
            [EnumMember(Value = "(xyz)")]
            Xyz = 3

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InlineObject2" /> class.
        /// </summary>
        /// <param name="enumFormStringArray">Form parameter enum test (string array).</param>
        /// <param name="enumFormString">Form parameter enum test (string) (default to EnumFormStringEnum.Efg).</param>
        public InlineObject2(IReadOnlyList<EnumFormStringArrayEnum>? enumFormStringArray = default, EnumFormStringEnum? enumFormString = EnumFormStringEnum.Efg)
        {
            EnumFormStringArray = enumFormStringArray;
            EnumFormString = enumFormString;
        }

        /// <summary>
        /// Form parameter enum test (string array)
        /// </summary>
        /// <value>Form parameter enum test (string array)</value>
        [JsonProperty("enum_form_string_array", NullValueHandling = NullValueHandling.Ignore)]
        public IReadOnlyList<EnumFormStringArrayEnum>? EnumFormStringArray { get; set; }

        /// <summary>
        /// Form parameter enum test (string)
        /// </summary>
        /// <value>Form parameter enum test (string)</value>
        [JsonProperty("enum_form_string", NullValueHandling = NullValueHandling.Ignore)]
        public EnumFormStringEnum? EnumFormString { get; set; }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object? obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((InlineObject2)obj);
        }

        /// <summary>
        /// Returns true if InlineObject2 instances are equal
        /// </summary>
        /// <param name="other">Instance of InlineObject2 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineObject2? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;
            return 
                Equals(EnumFormStringArray, other.EnumFormStringArray) &&
                EnumFormString == other.EnumFormString;
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            var hashCode = new HashCode();
            hashCode.Add(EnumFormStringArray);
            hashCode.Add(EnumFormString);
            return hashCode.ToHashCode();
        }
    }
}
