/* 
 * OpenAPI Petstore
 *
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Org.OpenAPITools.Models
{
    /// <summary>
    /// InlineObject3
    /// </summary>
    public partial class InlineObject3 : IEquatable<InlineObject3>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineObject3" /> class.
        /// </summary>
        [JsonConstructor]
        protected InlineObject3() { }

        /// <summary>
        /// Initializes a new instance of the <see cref="InlineObject3" /> class.
        /// </summary>
        /// <param name="integer">None.</param>
        /// <param name="int32">None.</param>
        /// <param name="int64">None.</param>
        /// <param name="number">None (required).</param>
        /// <param name="_float">None.</param>
        /// <param name="_double">None (required).</param>
        /// <param name="_string">None.</param>
        /// <param name="patternWithoutDelimiter">None (required).</param>
        /// <param name="_byte">None (required).</param>
        /// <param name="binary">None.</param>
        /// <param name="date">None.</param>
        /// <param name="dateTime">None.</param>
        /// <param name="password">None.</param>
        /// <param name="callback">None.</param>
        public InlineObject3(int? integer = default, int? int32 = default, long? int64 = default, decimal number = default, float? _float = default, double _double = default, string? _string = default, string patternWithoutDelimiter = default, byte[] _byte = default, System.IO.Stream? binary = default, DateTime? date = default, DateTime? dateTime = default, string? password = default, string? callback = default)
        {
            Integer = integer;
            Int32 = int32;
            Int64 = int64;
            Number = number;
            Float = _float;
            Double = _double;
            String = _string;
            PatternWithoutDelimiter = patternWithoutDelimiter;
            Byte = _byte;
            Binary = binary;
            Date = date;
            DateTime = dateTime;
            Password = password;
            Callback = callback;
        }

        /// <summary>
        /// None
        /// </summary>
        /// <value>None</value>
        [JsonProperty("integer", NullValueHandling = NullValueHandling.Ignore)]
        public int? Integer { get; set; }

        /// <summary>
        /// None
        /// </summary>
        /// <value>None</value>
        [JsonProperty("int32", NullValueHandling = NullValueHandling.Ignore)]
        public int? Int32 { get; set; }

        /// <summary>
        /// None
        /// </summary>
        /// <value>None</value>
        [JsonProperty("int64", NullValueHandling = NullValueHandling.Ignore)]
        public long? Int64 { get; set; }

        /// <summary>
        /// None
        /// </summary>
        /// <value>None</value>
        [Required]
        [JsonProperty("number", NullValueHandling = NullValueHandling.Ignore)]
        public decimal Number { get; set; }

        /// <summary>
        /// None
        /// </summary>
        /// <value>None</value>
        [JsonProperty("float", NullValueHandling = NullValueHandling.Ignore)]
        public float? Float { get; set; }

        /// <summary>
        /// None
        /// </summary>
        /// <value>None</value>
        [Required]
        [JsonProperty("double", NullValueHandling = NullValueHandling.Ignore)]
        public double Double { get; set; }

        /// <summary>
        /// None
        /// </summary>
        /// <value>None</value>
        [RegularExpression(@"[a-z]")]
        [JsonProperty("string", NullValueHandling = NullValueHandling.Ignore)]
        public string? String { get; set; }

        /// <summary>
        /// None
        /// </summary>
        /// <value>None</value>
        [Required]
        [RegularExpression(@"^[A-Z].*")]
        [JsonProperty("pattern_without_delimiter", NullValueHandling = NullValueHandling.Ignore)]
        public string PatternWithoutDelimiter { get; set; }

        /// <summary>
        /// None
        /// </summary>
        /// <value>None</value>
        [Required]
        [JsonProperty("byte", NullValueHandling = NullValueHandling.Ignore)]
        public byte[] Byte { get; set; }

        /// <summary>
        /// None
        /// </summary>
        /// <value>None</value>
        [JsonProperty("binary", NullValueHandling = NullValueHandling.Ignore)]
        public System.IO.Stream? Binary { get; set; }

        /// <summary>
        /// None
        /// </summary>
        /// <value>None</value>
        [JsonProperty("date", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(Org.OpenAPITools.Client.OpenAPIDateConverter))]
        public DateTime? Date { get; set; }

        /// <summary>
        /// None
        /// </summary>
        /// <value>None</value>
        [JsonProperty("dateTime", NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? DateTime { get; set; }

        /// <summary>
        /// None
        /// </summary>
        /// <value>None</value>
        [MinLength(10)]
        [MaxLength(64)]
        [JsonProperty("password", NullValueHandling = NullValueHandling.Ignore)]
        public string? Password { get; set; }

        /// <summary>
        /// None
        /// </summary>
        /// <value>None</value>
        [JsonProperty("callback", NullValueHandling = NullValueHandling.Ignore)]
        public string? Callback { get; set; }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object? obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((InlineObject3)obj);
        }

        /// <summary>
        /// Returns true if InlineObject3 instances are equal
        /// </summary>
        /// <param name="other">Instance of InlineObject3 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineObject3? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;
            return 
                Integer == other.Integer &&
                Int32 == other.Int32 &&
                Int64 == other.Int64 &&
                Number == other.Number &&
                Float == other.Float &&
                Double == other.Double &&
                String == other.String &&
                PatternWithoutDelimiter == other.PatternWithoutDelimiter &&
                Byte == other.Byte &&
                Binary == other.Binary &&
                Date == other.Date &&
                DateTime == other.DateTime &&
                Password == other.Password &&
                Callback == other.Callback;
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            var hashCode = new HashCode();
            hashCode.Add(Integer);
            hashCode.Add(Int32);
            hashCode.Add(Int64);
            hashCode.Add(Number);
            hashCode.Add(Float);
            hashCode.Add(Double);
            hashCode.Add(String);
            hashCode.Add(PatternWithoutDelimiter);
            hashCode.Add(Byte);
            hashCode.Add(Binary);
            hashCode.Add(Date);
            hashCode.Add(DateTime);
            hashCode.Add(Password);
            hashCode.Add(Callback);
            return hashCode.ToHashCode();
        }
    }
}
