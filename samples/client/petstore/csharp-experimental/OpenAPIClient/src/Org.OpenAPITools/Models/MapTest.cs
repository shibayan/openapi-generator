/*
 * OpenAPI Petstore
 *
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Org.OpenAPITools.Models
{
    /// <summary>
    /// MapTest
    /// </summary>
    public partial class MapTest : IEquatable<MapTest>
    {
        /// <summary>
        /// Defines Inner
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum InnerEnum
        {
            /// <summary>
            /// Enum UPPER for value: UPPER
            /// </summary>
            [EnumMember(Value = "UPPER")]
            UPPER = 1,

            /// <summary>
            /// Enum Lower for value: lower
            /// </summary>
            [EnumMember(Value = "lower")]
            Lower = 2

        }


        /// <summary>
        /// Initializes a new instance of the <see cref="MapTest" /> class.
        /// </summary>
        /// <param name="mapMapOfString">mapMapOfString.</param>
        /// <param name="mapOfEnumString">mapOfEnumString.</param>
        /// <param name="directMap">directMap.</param>
        /// <param name="indirectMap">indirectMap.</param>
        public MapTest(IDictionary<string, IDictionary<string, string>>? mapMapOfString = default, IDictionary<string, InnerEnum>? mapOfEnumString = default, IDictionary<string, bool>? directMap = default, IDictionary<string, bool>? indirectMap = default)
        {
            MapMapOfString = mapMapOfString;
            MapOfEnumString = mapOfEnumString;
            DirectMap = directMap;
            IndirectMap = indirectMap;
        }

        /// <summary>
        /// Gets or Sets MapMapOfString
        /// </summary>
        [JsonProperty("map_map_of_string", NullValueHandling = NullValueHandling.Ignore)]
        public IDictionary<string, IDictionary<string, string>>? MapMapOfString { get; set; }

        /// <summary>
        /// Gets or Sets MapOfEnumString
        /// </summary>
        [JsonProperty("map_of_enum_string", NullValueHandling = NullValueHandling.Ignore)]
        public IDictionary<string, InnerEnum>? MapOfEnumString { get; set; }

        /// <summary>
        /// Gets or Sets DirectMap
        /// </summary>
        [JsonProperty("direct_map", NullValueHandling = NullValueHandling.Ignore)]
        public IDictionary<string, bool>? DirectMap { get; set; }

        /// <summary>
        /// Gets or Sets IndirectMap
        /// </summary>
        [JsonProperty("indirect_map", NullValueHandling = NullValueHandling.Ignore)]
        public IDictionary<string, bool>? IndirectMap { get; set; }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object? obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((MapTest)obj);
        }

        /// <summary>
        /// Returns true if MapTest instances are equal
        /// </summary>
        /// <param name="other">Instance of MapTest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MapTest? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;
            return 
                Equals(MapMapOfString, other.MapMapOfString) &&
                Equals(MapOfEnumString, other.MapOfEnumString) &&
                Equals(DirectMap, other.DirectMap) &&
                Equals(IndirectMap, other.IndirectMap);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            var hashCode = new HashCode();
            hashCode.Add(MapMapOfString);
            hashCode.Add(MapOfEnumString);
            hashCode.Add(DirectMap);
            hashCode.Add(IndirectMap);
            return hashCode.ToHashCode();
        }
    }
}
