/*
 * OpenAPI Petstore
 *
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Org.OpenAPITools.Models
{
    /// <summary>
    /// Model for testing model name same as property name
    /// </summary>
    public partial class Name : IEquatable<Name>
    {
        /// <summary>
        /// Gets or Sets _Name
        /// </summary>
        [Required]
        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public int _Name { get; set; }

        /// <summary>
        /// Gets or Sets SnakeCase
        /// </summary>
        [JsonProperty("snake_case", NullValueHandling = NullValueHandling.Ignore)]
        public int? SnakeCase { get; }

        /// <summary>
        /// Gets or Sets Property
        /// </summary>
        [JsonProperty("property", NullValueHandling = NullValueHandling.Ignore)]
        public string? Property { get; set; }

        /// <summary>
        /// Gets or Sets _123Number
        /// </summary>
        [JsonProperty("123Number", NullValueHandling = NullValueHandling.Ignore)]
        public int? _123Number { get; }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object? obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((Name)obj);
        }

        /// <summary>
        /// Returns true if Name instances are equal
        /// </summary>
        /// <param name="other">Instance of Name to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Name? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;
            return 
                _Name == other._Name &&
                SnakeCase == other.SnakeCase &&
                Property == other.Property &&
                _123Number == other._123Number;
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            var hashCode = new HashCode();
            hashCode.Add(_Name);
            hashCode.Add(SnakeCase);
            hashCode.Add(Property);
            hashCode.Add(_123Number);
            return hashCode.ToHashCode();
        }
    }
}
